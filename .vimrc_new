"""""""""""""""""""""""""""""""""""""""""""""""""""""
" General
"""""""""""""""""""""""""""""""""""""""""""""""""""""
set history=700

"This lets VI show the row and column at the bottom of the screen
set ruler
set cursorline
set wildmenu
set showcmd

set cmdheight=2

set hlsearch
set incsearch

set lazyredraw

syntax enable
set colorcolumn=85

""""""""""""""""""""""""""""""""""""""""""""""""""""
" Dealing with tabs.
""""""""""""""""""""""""""""""""""""""""""""""""""""
"Expand tabs to spaces.
set expandtab
""""""""""""""""""""""set smarttab

"Set tab to 4 spaces.
set shiftwidth=4
set tabstop=4

"""set ai "Auto indent
"""set si "Smart indent
set wrap "Wrap lines

set showmatch
set mat=2
set nu!

"""""""""""""""""""""""""""""""""""
" maps
"""""""""""""""""""""""""""""""""""
:let mapleader = ","
" Toggle line numbers
map <leader>nu :set nu<CR>
map <leader>nu! :set nu!<CR>

" Viewport Controls
" " ie moving between split panes
" ,l - for left pane
" ,r - for right pane
" ,<UP> - for Upper pane
" ,<Down> - for Down pane
map <silent>,<Left> <C-w>h
map <silent>,<Right> <C-w>l
map <silent>,<Up> <C-w>k
map <silent>,<Down> <C-w>j

"Cleanup whitespaces
map <leader>ws! :%s/\s\+$//e

"By default do not show line numbers.
set nu!

""""""""""""""""""""""""""""""""""""""""""""
" https://vimtricks.com/p/highlight-specific-lines/
" Highlight specific lines.
" define line highlight color
highlight LineHighlight ctermbg=lightblue guibg=lightblue
" highlight the current line (mapping)
nnoremap <silent> <Leader>hl :call matchadd('LineHighlight', '\%'.line('.').'l')<CR>
" clear all the highlighted lines (mapping)
nnoremap <silent> <Leader>nh :call clearmatches()<CR>
"""""""""""""""""""""""""""""""""""""""""""""


""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Status line
""""""""""""""""""""""""""""""""""""""""""""""""""""""

function! GitBranch()
  return system("git rev-parse --abbrev-ref HEAD 2>/dev/null | tr -d '\n'")
endfunction

function! StatuslineGit()
  let l:branchname = GitBranch()
  return strlen(l:branchname) > 0?'  '.l:branchname.' ':''
endfunction

set laststatus=2
"set statusline=
"set statusline+=%#PmenuSel#
"set statusline+=%{StatuslineGit()}
"set statusline+=%#test#
"set statusline+=%#LineNr#
"set statusline+=\ %F
"set statusline+=%m\
"set statusline+=%=
"set statusline+=%#CursorColumn#
"set statusline+=\ %y
"set statusline+=\ %{&fileencoding?&fileencoding:&encoding}
"set statusline+=\[%{&fileformat}\]
"set statusline+=\ %p%%
"set statusline+=\ %l:%c
"set statusline+=\

"""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins
"""""""""""""""""""""""""""""""""""""""""""""""""""""""
"""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Set pathogen.
"""""""""""""""""""""""""""""""""""""""""""""""""""""""
function PathogenConfig()
    call pathogen#infect()
    call pathogen#helptags()
    filetype plugin indent on
    syntax on
endfunction

call PathogenConfig()

""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vundle plugin manager
""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
    " Let Vundle manage vundle (https://github.com/VundleVim/Vundle.vim)
    Plugin 'VundleVim/Vundle.vim'
    Plugin 'preservim/nerdtree'

    " Snippets engine. (https://github.com/garbas/vim-snipmate)
    Plugin 'MarcWeber/vim-addon-mw-utils'
    Plugin 'tomtom/tlib_vim'
    Plugin 'garbas/vim-snipmate'

    " Snippets plugin (https://github.com/honza/vim-snippets)
    Plugin 'honza/vim-snippets'

    " Python autocomplete (https://github.com/davidhalter/jedi-vim)
    Plugin 'davidhalter/jedi-vim'

    " VIM Powerline status bar.
    Plugin 'Lokaltog/vim-powerline'

call vundle#end()
filetype plugin indent on    " required


"""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Nerdtree configuration
"""""""""""""""""""""""""""""""""""""""""""""""""""""""
function NERDTreeConfig()
    "NERDTree plugin Configuration
    " Map ,n to open/close navigation window. <silent>,<Left> <C-w>h
    map ,n :NERDTreeToggle<CR>
    let g:NERDTreeChDirMode=2
    let g:NERDTreeIgnore=['\.vim$', '\~$', '\.pyc$', '\.swp$']
    let g:NERDTreeSortOrder=['^__\.py$', '\/$', '*', '\.swp$',  '\~$']
endfunction

call NERDTreeConfig()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""
" snipmate configuration 
"""""""""""""""""""""""""""""""""""""""""""""""""""""""
function SnipmateConfig()
    let g:snipMate = { 'snippet_version' : 1 }
endfunction

call SnipmateConfig()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""
" jedi-vim configuration
"""""""""""""""""""""""""""""""""""""""""""""""""""""""
function JediVimConfig()
    let g:jedi#auto_initialization = 1
    let g:jedi#show_call_signatures = "1"
endfunction

call JediVimConfig()
